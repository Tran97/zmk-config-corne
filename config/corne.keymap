/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q        &kp W  &kp E               &kp R           &kp T             &kp Y            &kp U            &kp I                       &kp O    &kp P      &none
&none  &kp A        &kp S  &kp D               &kp F           &kp G             &kp H            &kp J            &kp K                       &kp L    &kp SEMI   &none
&none  &mt LCTRL Z  &kp X  &kp C               &mt LEFT_ALT V  &mt LEFT_GUI B    &mt RIGHT_GUI N  &mt RIGHT_ALT M  &kp COMMA                   &kp DOT  &kp COLON  &none
                           &mt LEFT_SHIFT TAB  &lt 2 ENTER     &kp SPACE         &kp BACKSPACE    &lt 1 ESCAPE     &mt LEFT_SHIFT PRINTSCREEN
            >;
        };

        LEFT_LOWER {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH      &kp PERCENT    &kp AMPS      &kp CARET  &kp EQUAL  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION  &none
&none   &kp LESS_THAN    &kp GREATER_THAN   &kp ASTERISK  &kp PLUS       &kp MINUS     &kp TILDE  &kp SLASH  &kp LBKT              &kp RBKT               &kp SQT       &none
&none   &none            &none              &none         &kp BACKSLASH  &kp DOLLAR    &kp UNDER  &kp PIPE   &kp LBRC              &kp RBRC               &kp AT_SIGN   &none
                                            &trans        &trans         &trans        &trans     &trans     &trans
            >;
        };

        RIGHT_LOWER {
            bindings = <
&none  &kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH      &kp PERCENT    &kp AMPS      &kp CARET  &kp EQUAL  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION  &none
&none  &kp LESS_THAN    &kp GREATER_THAN   &kp ASTERISK  &kp PLUS       &kp MINUS     &kp TILDE  &kp SLASH  &kp LBKT              &kp RBKT               &kp SQT       &none
&none  &none            &none              &none         &kp BACKSLASH  &kp DOLLAR    &kp UNDER  &kp PIPE   &kp LBRC              &kp RBRC               &kp AT_SIGN   &none
                                           &trans        &trans         &trans        &trans     &trans     &trans
            >;
        };

        TRI_LAYER {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N1          &kp N2        &kp N3        &kp N4        &kp N5          &kp N6           &kp N7             &kp N8          &kp N9            &kp N0      &none
&none  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT         &kp DOWN           &kp UP          &kp RIGHT         &none       &none
&none  &bt BT_CLR_ALL  &none         &none         &none         &bt BT_CLR      &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &none
                                     &trans        &trans        &trans          &trans           &trans             &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        TRI {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
